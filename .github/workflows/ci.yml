name: CI
on:
  push:
    branches: [ main, "repair/**" ]
  pull_request:
    branches: [ main ]
jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Detect PHP service
        id: detect-php
        run: |
          set -e
          CANDS='php php-fpm wordpress app web backend fpm wp site'
          SVC=""
          for c in $CANDS; do
            if docker compose config --services | grep -E "^${c}$" >/dev/null 2>&1; then SVC="$c"; break; fi
          done
          if [ -z "$SVC" ]; then
            echo "No PHP-like service found. Rename your service or edit the allowlist."; exit 1
          fi
          echo "PHP_SERVICE=$SVC" >> "$GITHUB_ENV"
          echo "Detected PHP service: $SVC"

      - name: Detect DB service
        id: detect-db
        run: |
          set -e
          CANDS='db mysql mariadb'
          SVC=""
          for d in $CANDS; do
            if docker compose config --services | grep -E "^${d}$" >/dev/null 2>&1; then SVC="$d"; break; fi
          done
          if [ -z "$SVC" ]; then
            echo "No DB-like service found. Rename your service or edit the allowlist."; exit 1
          fi
          echo "DB_SERVICE=$SVC" >> "$GITHUB_ENV"
          echo "Detected DB service: $SVC"

      - name: Normalize shell scripts (LF) and perms
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix
          if [ -d docker ]; then find docker -type f -name "*.sh" -print0 | xargs -0 -I{} dos2unix {}; fi
          chmod +x docker/init.sh || true
          git config core.fileMode false || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      - name: Composer cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
          key: composer-${{ runner.os }}-v2-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-v2-

      - name: Build and start
        run: |
          docker compose build --no-cache
          docker compose up -d ${{ env.DB_SERVICE }}
          sleep 8
          docker compose up -d ${{ env.PHP_SERVICE }}

      - name: Wait for DB
        run: |
          for i in $(seq 1 120); do
            docker compose exec -T ${{ env.DB_SERVICE }} sh -lc 'mysqladmin ping -u"$$MYSQL_USER" -p"$$MYSQL_PASSWORD" --silent' \
            || docker compose exec -T ${{ env.DB_SERVICE }} sh -lc 'test -S /var/run/mysqld/mysqld.sock' \
            && exit 0 || true
            sleep 2
          done
          echo "DB not ready after timeout" >&2; exit 1

      - name: Composer install (retry, unlimited memory)
        run: |
          docker compose run --rm ${{ env.PHP_SERVICE }} bash -lc 'export COMPOSER_MEMORY_LIMIT=-1; composer clear-cache || true; composer install -o || composer install -o'

      - name: Project init
        run: docker compose run --rm ${{ env.PHP_SERVICE }} bash -lc "./docker/init.sh"

      - name: Unit tests
        run: docker compose run --rm ${{ env.PHP_SERVICE }} vendor/bin/phpunit -v

      - name: Quality selective
        run: docker compose run --rm ${{ env.PHP_SERVICE }} composer run quality:selective

      - name: Baseline check
        run: docker compose run --rm ${{ env.PHP_SERVICE }} php baseline-check --current-phase=FOUNDATION

      - name: Collect artifacts (optional)
        if: always()
        run: |
          mkdir -p artifacts
          cp -r build artifacts/ || true
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: artifacts
