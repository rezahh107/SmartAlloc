name: SmartAlloc CI
on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'composer.*'
      - 'phpcs.xml'
      - 'psalm.xml*'
      - 'phpunit.xml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read

jobs:
  qa:
    name: 🛡️ QA (PHP ${{ matrix.php }} / WP ${{ matrix.wp }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: wordpress_test
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php: ['8.1', '8.2']
        wp: ['6.3', '6.4', 'latest']
        include:
          - php: '8.2'
            wp: 'latest'
            coverage: true

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, xml, json, mysqli, curl, dom
          tools: composer, phpunit
          coverage: xdebug

      - name: 🛠️ System tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip subversion curl tar mysql-client jq

      - name: ♻️ Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 📦 Composer install
        run: composer install --no-interaction --prefer-dist --ansi

      - name: 🔧 PHPCS installed_paths (safety)
        run: |
          vendor/bin/phpcs --config-set installed_paths \
          vendor/automattic/vipwpcs,vendor/wp-coding-standards/wpcs, \
          vendor/phpcompatibility/php-compatibility, \
          vendor/phpcompatibility/phpcompatibility-wp, \
          vendor/phpcsstandards/phpcsextra, \
          vendor/phpcsstandards/phpcsutils, \
          vendor/sirbrillig/phpcs-variable-analysis

      - name: 🧪 Install WP test suite
        env: { WP_VERSION: ${{ matrix.wp }} }
        run: |
          chmod +x scripts/install-wp-tests.sh
          bash scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1:3306 $WP_VERSION

      - name: 🔍 PHPCS (soft-fail)
        run: vendor/bin/phpcs -q --standard=phpcs.xml --report=full --report-summary || true

      - name: 🔎 Psalm (soft-fail)
        run: |
          vendor/bin/psalm --no-progress --output-format=github --stats || true
          vendor/bin/psalm --taint-analysis || true

      - name: 🔎 PHP syntax lint
        run: composer lint:php

      - name: 🧪 PHPUnit (smoke only)
        env:
          XDEBUG_MODE: coverage
        run: |
          vendor/bin/phpunit \
            tests/Unit/BrainMonkeySmokeTest.php \
            tests/WordPress/Smoke/BootTest.php

      - name: 🔐 Ensure scripts executable (defensive)
        if: always()
        run: |
          chmod +x scripts/*.php || true
          chmod +x scripts/new_adr.sh || true

      - name: 🔄 Generate FEATURES.md
        if: always()
        run: php scripts/generate_features_md.php

      - name: 🔁 Sync AI context (ADRs → ai_context.json)
        if: always()
        run: php scripts/ai_context_sync.php

      - name: 📝 Append project state to summary
        if: always()
        run: |
          echo "## 📊 Feature Scores" >> "$GITHUB_STEP_SUMMARY"
          head -n 40 FEATURES.md >> "$GITHUB_STEP_SUMMARY" || true
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## 🤖 AI Context (decisions)" >> "$GITHUB_STEP_SUMMARY"
          cat ai_context.json | jq '.decisions | {count: length, items: .[0:5]}' >> "$GITHUB_STEP_SUMMARY" || true

      - name: ✅ Verify summary sections
        if: always()
        run: |
          test -f "$GITHUB_STEP_SUMMARY"
          grep -q "## 📊 Feature Scores" "$GITHUB_STEP_SUMMARY"
          grep -q "## 🤖 AI Context (decisions)" "$GITHUB_STEP_SUMMARY"
          echo "Summary contains required sections ✓"

      - name: ✅ Verify artifacts presence & JSON validity
        if: always()
        run: |
          test -s FEATURES.md || { echo "FEATURES.md missing or empty"; exit 1; }
          test -s ai_context.json || { echo "ai_context.json missing or empty"; exit 1; }
          jq empty ai_context.json
          echo "Artifacts present and ai_context.json is valid JSON ✓"

      - name: ✅ Verify E2E not auto-run
        if: always()
        env:
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          API="https://api.github.com/repos/$REPO"
          WF_ID=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            "$API/actions/workflows" | jq -r '.workflows[] | select(.name=="E2E (optional)") | .id')
          if [ -z "$WF_ID" ]; then
            echo "E2E workflow not found; skipping check"
            exit 0
          fi
          EVENTS=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            "$API/actions/workflows/$WF_ID/runs?per_page=50" | jq -r '.workflow_runs[] | select(.head_sha=="'"$SHA"'") | .event')
          echo "E2E runs for this SHA (if any):"; echo "$EVENTS"
          if echo "$EVENTS" | grep -Eq 'push|pull_request'; then
            echo "E2E ran automatically! Expected only workflow_dispatch/schedule."; exit 1;
          fi
          echo "E2E did not auto-run ✓"
  full:
    name: 🔬 Full Test Matrix (manual/scheduled)
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: qa
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: wordpress_test
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with: { php-version: '8.1', tools: composer }
      - name: 🛠️ System tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip subversion curl tar mysql-client jq
      - run: composer install --no-interaction --prefer-dist --ansi
      - name: 🔧 PHPCS installed_paths (safety)
        run: |
          vendor/bin/phpcs --config-set installed_paths \
          vendor/automattic/vipwpcs,vendor/wp-coding-standards/wpcs, \
          vendor/phpcompatibility/php-compatibility, \
          vendor/phpcompatibility/phpcompatibility-wp, \
          vendor/phpcsstandards/phpcsextra, \
          vendor/phpcsstandards/phpcsutils, \
          vendor/sirbrillig/phpcs-variable-analysis
      - name: 🧪 Install WP test suite
        run: |
          chmod +x scripts/install-wp-tests.sh
          bash scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1:3306 latest
      - name: 🔍 PHPCS (soft-fail)
        run: vendor/bin/phpcs -q --standard=phpcs.xml --report=full --report-summary || true
      - name: 🔎 Psalm (soft-fail)
        run: |
          vendor/bin/psalm --no-progress --output-format=github --stats || true
          vendor/bin/psalm --taint-analysis || true
      - name: 🧪 PHPUnit (full suites)
        env: { XDEBUG_MODE: coverage }
        run: vendor/bin/phpunit --testsuite Unit,WordPress,VIP,Integration --coverage-clover coverage.xml
