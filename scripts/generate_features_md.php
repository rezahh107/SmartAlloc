<?php
declare(strict_types=1);

/**
 * Generate FEATURES.md from features.json with scoring:
 * +40 if all code_paths exist
 * +30 if all test_paths exist
 * +30 if security signals found in code (nonce/permission_callback/prepare)
 * Score max 100; badge: ðŸŸ¢ 90â€“100, ðŸŸ  70â€“89, ðŸ”´ <70
 * Never fails CI: writes a helpful placeholder when inputs are missing.
 */
$root = dirname(__DIR__);
$featuresFile = $root . '/features.json';
$outFile = $root . '/FEATURES.md';

function read_features(string $file): array {
    if (!is_file($file)) return ['schema' => 1, 'features' => []];
    $raw = trim((string)@file_get_contents($file));
    if ($raw === '') return ['schema' => 1, 'features' => []];
    $json = json_decode($raw, true);
    return (is_array($json) && isset($json['features']) && is_array($json['features'])) ? $json : ['schema' => 1, 'features' => []];
}

function all_exist(array $paths): bool {
    if (!$paths) return false;
    foreach ($paths as $p) {
        if (!is_file($p) && !is_dir($p)) return false;
    }
    return true;
}

function security_hit(array $paths): bool {
    if (!$paths) return false;
    $signals = ['wp_verify_nonce', 'permission_callback', 'DbSafe::mustPrepare', '$wpdb->prepare('];
    foreach ($paths as $p) {
        if (is_dir($p)) {
            $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($p));
            foreach ($rii as $f) {
                if ($f->isDir() || substr($f->getFilename(), -4) !== '.php') continue;
                $content = @file_get_contents($f->getPathname());
                if ($content === false) continue;
                foreach ($signals as $sig) {
                    if (strpos($content, $sig) !== false) return true;
                }
            }
            continue;
        }
        if (is_file($p)) {
            $content = @file_get_contents($p);
            if ($content !== false) {
                foreach ($signals as $sig) {
                    if (strpos($content, $sig) !== false) return true;
                }
            }
        }
    }
    return false;
}

function badge(int $score): string {
    if ($score >= 90) return 'ðŸŸ¢';
    if ($score >= 70) return 'ðŸŸ ';
    return 'ðŸ”´';
}

$data = read_features($featuresFile);
$lines = [];
$lines[] = '# ðŸ“‹ FEATURES';
$lines[] = '';
$lines[] = '> Generated by CI. Score = code (40) + tests (30) + security signals (30).';
$lines[] = 'Legend: ðŸŸ¢ 90â€“100 (Ready), ðŸŸ  70â€“89 (Testing), ðŸ”´ <70 (In progress)';
$lines[] = '';
$lines[] = '| Feature | Key | Score | Badge | Risk | Code | Tests | Security |';
$lines[] = '|---|---:|---:|:---:|:---:|:---:|:---:|:---:|';

if (empty($data['features'])) {
    $lines[] = '| _No features defined_ | â€“ | 0 | ðŸ”´ | â€“ | âœ– | âœ– | âœ– |';
    $lines[] = '';
    $lines[] = '_Add items to **features.json** to populate this table._';
    file_put_contents($outFile, implode("\n", $lines));
    exit(0);
}

foreach ($data['features'] as $f) {
    $name   = (string)($f['name'] ?? 'Unnamed');
    $key    = (string)($f['key'] ?? '');
    $risk   = (string)($f['risk'] ?? 'unknown');
    $code   = $f['code_paths'] ?? [];
    $tests  = $f['test_paths'] ?? [];
    $codeOk = all_exist($code);
    $testOk = all_exist($tests);
    $secOk  = security_hit($code);

    $score = 0;
    if ($codeOk) $score += 40;
    if ($testOk) $score += 30;
    if ($secOk)  $score += 30;
    if ($score > 100) $score = 100;

    $lines[] = sprintf(
        '| %s | %s | %d | %s | %s | %s | %s | %s |',
        $name,
        $key !== '' ? $key : 'â€”',
        $score,
        badge($score),
        $risk,
        $codeOk ? 'âœ…' : 'âœ–',
        $testOk ? 'âœ…' : 'âœ–',
        $secOk  ? 'âœ…' : 'âœ–'
    );
}

$lines[] = '';
file_put_contents($outFile, implode("\n", $lines));

