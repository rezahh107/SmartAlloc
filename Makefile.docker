# Detect compose binary
DOCKER_COMPOSE ?= docker compose

# Auto-detect PHP-like service name (first match)
# Allowlist kept tight to avoid wrong picks
PHP_SERVICE ?= $(shell $(DOCKER_COMPOSE) config --services 2>/dev/null | awk '/^(php|php-fpm|wordpress|app|web|backend|fpm|wp|site)$$/{print; exit}')

ifeq ($(strip $(PHP_SERVICE)),)
$(error Could not detect a PHP-like service. Set PHP_SERVICE=your_service or rename your service to one of: php, php-fpm, wordpress, app, web, backend, fpm, wp, site)
endif

# DB service auto-detect
DB_SERVICE ?= $(shell $(DOCKER_COMPOSE) config --services 2>/dev/null | awk '/^(db|mysql|mariadb)$$/{print; exit}')
ifeq ($(strip $(DB_SERVICE)),)
$(error Could not detect DB-like service (db/mysql/mariadb). Set DB_SERVICE=your_db)
endif

# wait for DB to be responsive
wait-db:
	@echo ">> Waiting for DB ($(DB_SERVICE)) to be ready..."
	@$(DOCKER_COMPOSE) exec -T $(DB_SERVICE) sh -lc '\
		for i in $$(seq 1 60); do \
			mysqladmin ping -u"$$MYSQL_USER" -p"$$MYSQL_PASSWORD" --silent && exit 0; \
			sleep 2; \
		done; \
		echo "DB not ready after timeout" >&2; exit 1'

# longer wait with socket fallback
wait-db-long:
	@echo ">> Waiting longer for DB ($(DB_SERVICE))..."
	@$(DOCKER_COMPOSE) exec -T $(DB_SERVICE) sh -lc '\
		for i in $$(seq 1 120); do \
			(mysqladmin ping -u"$$MYSQL_USER" -p"$$MYSQL_PASSWORD" --silent) || (test -S /var/run/mysqld/mysqld.sock) && exit 0; \
			sleep 2; \
		done; \
		echo "DB not ready after extended timeout" >&2; exit 1'

docker-test:
	$(DOCKER_COMPOSE) down -v
	$(DOCKER_COMPOSE) up -d $(DB_SERVICE)
	$(MAKE) wait-db-long
	$(DOCKER_COMPOSE) up -d $(PHP_SERVICE)
	$(DOCKER_COMPOSE) run --rm $(PHP_SERVICE) bash -lc 'chmod +x ./docker/init.sh || true'
	$(DOCKER_COMPOSE) run --rm $(PHP_SERVICE) bash -lc 'export COMPOSER_MEMORY_LIMIT=-1; composer clear-cache || true; composer install -o || composer install -o'
	$(DOCKER_COMPOSE) run --rm $(PHP_SERVICE) bash -lc 'if [ -f ./docker/init.sh ]; then ./docker/init.sh; else echo "No docker/init.sh, skipping"; fi'
	$(DOCKER_COMPOSE) run --rm $(PHP_SERVICE) vendor/bin/phpunit -v

docker-ci: docker-test
	$(DOCKER_COMPOSE) run --rm $(PHP_SERVICE) composer run quality:selective
	$(DOCKER_COMPOSE) run --rm $(PHP_SERVICE) php baseline-check --current-phase=FOUNDATION

docker-precommit:
	@echo ">> Bringing up services"
	$(DOCKER_COMPOSE) up -d $(DB_SERVICE) $(PHP_SERVICE)
	$(MAKE) wait-db-long
	@echo ">> Ensuring Composer deps are installed (optimized)"
	$(DOCKER_COMPOSE) exec -T $(PHP_SERVICE) bash -lc 'set -e; cd /var/www/html/wp-content/plugins/smart-alloc && export COMPOSER_MEMORY_LIMIT=-1; composer install -o || true'
	@echo ">> Running selective quality gates (staged PHP files)"
	$(DOCKER_COMPOSE) exec -T $(PHP_SERVICE) bash -lc 'set -e; cd /var/www/html/wp-content/plugins/smart-alloc && composer run -q quality:selective || true'
	@echo ">> Running baseline check (FOUNDATION)"
	$(DOCKER_COMPOSE) exec -T $(PHP_SERVICE) bash -lc 'set -e; cd /var/www/html/wp-content/plugins/smart-alloc && php baseline-check --current-phase=FOUNDATION'
	@echo ">> Running Patch Guard"
	$(DOCKER_COMPOSE) exec -T $(PHP_SERVICE) bash -lc 'set -e; export HOME=/tmp; git -c safe.directory=/var/www/html/wp-content/plugins/smart-alloc config --global --add safe.directory /var/www/html/wp-content/plugins/smart-alloc || true; cd /var/www/html/wp-content/plugins/smart-alloc && bash scripts/patch-guard-check.sh'

ci-local:
	@if [ "$$((uname -s) 2>/dev/null)" = "Windows_NT" ] || [ -n "$$WINDIR" ]; then \
		powershell -ExecutionPolicy Bypass -File tools/offline-ci.ps1 ; \
	else \
		pwsh -File tools/offline-ci.ps1 ; \
	fi

ship-auto:
	@if [ "$$((uname -s) 2>/dev/null)" = "Windows_NT" ] || [ -n "$$WINDIR" ]; then \
		powershell -ExecutionPolicy Bypass -File tools/ship-auto.ps1 -Branch "$$((git rev-parse --abbrev-ref HEAD) 2>/dev/null)" ; \
	else \
		pwsh -File tools/ship-auto.ps1 -Branch "$$((git rev-parse --abbrev-ref HEAD) 2>/dev/null)" ; \
	fi
